swagger: '2.0'
info:
  version: '1.0'
  title: "HUBusivi"
  description: REST Api to manage assignments with three entities Admin, Student and Teacher.     
            Admin can add teacher, student and he can modify the database.  
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: ingegneriasoftwa2.herokuapp.com
basePath: /api/v2
schemes:
- https
consumes:
- application/json
produces:
- application/json 
securityDefinitions:
  Authentications:
    description: For access to three pages Student, Teacher and Admin 
    type: apiKey
    name: Authorization
    in: header

paths:
  
  #STUDENT
  /students/{StudentId}:
    parameters:
        - name: StudentId
          in: path
          description: ID of the student to fetch
          required: true
          type: string
          x-example: '1234'
    get:
      tags: 
        - "Students"
      security:
        - Authentications: []
      description: Returns a student from the database by name and password after login
      operationId: getStudentId
      
      responses:
        400:
          description: Bad request
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          description: Resources not found
        200:
          description: Successful Response
          schema:
            type: array
            items:
              $ref: '#/definitions/Students'
  
  /assignments/{StudentId}:
    parameters:
        - name: StudentId
          in: path
          description: ID of the student to fetch
          required: true
          type: string
          x-example: '1234'
    get:
      description: Returns all assignment active of a student found by ID 
      operationId: getStudent
      
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful Response
          schema:
            type: array
            items:
              $ref: '#/definitions/Assignment'
  
  /courses/{StudentId}:  
    parameters:
      - name: StudentId
        in: path
        description: ID of courses to fetch
        required: true
        type: string
        x-example: '1234'
    get:
      description: Get all courses of that studentId
      operationId: getCourses
      parameters:
        - name: course name
          in: query
          description: course name
          type: string
          x-example: 'Ingegneria del software - 2'
        - name: id_course
          in: query
          description: course id
          type: integer
          x-example: 113355
        - name: description
          in: query
          description: course description
          type: string
          x-example: "description"
        - name: id_teacher
          in: query
          description: id teacher of the course
          type: integer
          x-example: 163355
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
  /assignment/{StudentId}:  
    parameters:
      - name: StudentId
        in: path
        description: ID of student
        required: true
        type: string
        x-example: '1234'
    post:
      description: Student could insert Assignment ID and answer of that assignment
      operationId: add assignment
      parameters:
          - name: Delivery date
            in: query
            description: Delivery date of assignment
            type: string
            x-example: "12/12/2018"
          - name: Expire date
            in: query
            description: Expire date of assignment
            type: string
            x-example: "12/12/2018"
          - name: courseId
            in: query
            description: id of the course
            type: string
            x-example: "186495"
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
  /marks/{StudentId}:
    parameters:
      - name: StudentId
        in: path
        description: ID of student
        required: true
        type: string
        x-example: '1234'
    get:
      description: Gets marks of all assignments of this StudentId
      operationId: getMarks
      parameters:
        - name: id
          in: query
          description: id of the student
          type: integer
          x-example: 123456
        - name: id_course
          in: query
          description: course id of the mark
          type: integer
          x-example: 113355
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
  #TEACHER  
  /teacher/{TeacherId}:
    parameters:
      - name: TeacherId
        in: path
        description: ID of teacher to fetch
        required: true
        type: string
        x-example: '1234'
    
    get:  
      tags:
        - "Teacher"
      security:
        - Authentions: []
      description: Returns a teacher from the database by ID
      operationId: getSpecTeacher
      responses:
        400:
          description: Bad request
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          description: Resources not found
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Teachers'
  
  /assignment/{TeacherId}:  
    parameters:
      - name: TeacherId
        in: path
        description: ID of the assignment to fetch
        required: true
        type: string
        x-example: '1234'
    get:
      description: Get all assignments of that teacher
      operationId: getAssignments
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response  
  
  /addAssignment:
    post: 
        description: Insert name, question and deadline of new assignment
        operationId: addAssignmentTeacher
        parameters:
          - name: Id
            in: query
            description: id of the assignment
            type: string
            x-example: "123"
          - name: name
            in: query
            description: name of the assignment
            type: string
            x-example: "Assignment1" 
          - name: description
            in: query
            description: description of the assignment
            type: string
            x-example: "description"
          - name: upload date
            in: query
            description: upload date of the assignment
            type: string
            x-example: "12/12/2018"
          - name: expire date
            in: query
            description: Expire date of the assignment
            type: string
            x-example: "12/12/2018"
          - name: id_course
            in: query
            description: id of the course
            type: string
            x-example: "186495"
          
        responses:
          400:
            description: Bad request
          404:
            description: Resources not found
          200:
            description: Successful response
  
  /addMarks:
    post:
      description: Adds a Mark (only teacher)
      operationId: addMarkTeacher
      parameters:
        - name: mark
          in: query
          description: mark of the assignment
          type: integer
          x-example: 22
        - name: date
          in: query
          description: date of the given mark
          type: string
          x-example: "05/12/2018"
        - name: id_student
          in: query
          description: id of the student 
          type: integer
          x-example: 123456
        - name: id_mark
          in: query
          description: mark id of the mark
          type: integer
          x-example: 113355
        - name: id_assignment
          in: query
          description: assignment id of the mark
          type: integer
          x-example: 113325
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
  /courseStudent:
    get:
      description: Get all assignments of that teacher
      operationId: getcourseStudent
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response 
  
  /assignment/avg:
    get:
      description: >-
        Calculates the marks average about a specific assignment of a course.
      operationId: avgMark
      parameters:
        - name: Id
          in: query
          description: Course which I want to get the average of marks
          type: integer
          x-example: 113355
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Marks average
          
  /marks/{courseId}:
    parameters:
      - name: courseId
        in: path
        description: ID of the assignment to fetch
        required: true
        type: string
        x-example: '1234'
    get:
      description: Gets your marks of a specific course
      operationId: getMark
      parameters:
        - name: id_student
          in: query
          description: id of the student
          type: integer
          x-example: 123456
        - name: id_course
          in: query
          description: course id of the mark
          type: integer
          x-example: 113355
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
  #ADMIN    
  /admin/{AdminId}:
    parameters:
        - name: AdminId
          in: path
          description: ID of admin to fetch
          required: true
          type: string
          x-example: '1234'
    get:
      tags:
        - "Admin"
      security:
        - Authentions: []
      description: Returns admin after login
      operationId: getAdminId
      
      responses:
        400:
          description: Bad request
        401:
          $ref: "#/responses/UnauthorizedError"
        404:
          description: Resources not found
        200:
          description: Successful Response
          schema:
            type: array
            items:
              $ref: '#/definitions/Admin'
          
  /Teacher:
    post:
      operationId: addTeacher
      parameters:
        - name: mark
          in: query
          description: mark of the assignment
          type: integer
          x-example: 22
        - name: date
          in: query
          description: date of the given mark
          type: string
          x-example: "05/12/2018"
        - name: id_student
          in: query
          description: id of the student 
          type: integer
          x-example: 123456
        - name: id_mark
          in: query
          description: mark id of the mark
          type: integer
          x-example: 113355
        - name: id_assignment
          in: query
          description: assignment id of the mark
          type: integer
          x-example: 113325
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
 
    get:
      operationId: Add teacher
      parameters:
        - name: id
          in: query
          description: id of the teacher
          type: integer
          x-exaple: 128888
        - name: email
          in: query
          description: email of the teacher
          type: string
          x-example: "prof@gmail.com"
        - name: name
          in: query
          description: name of teacher
          type: string
          x-example: "Giorgio"
        - name: password
          in: query
          description: password for the logitemn
          type: string
          x-example: "grodi"
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
    delete:
      description: Add, get and delete student from database
      operationId: RemoveTeacher
      parameters:
        - name: id_teacher
          in: query
          description: ID of teacher that I want to delete
          type: integer
          x-example: 1
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
  
  /Student:
    post:
      operationId: addStudent
      parameters:
        - name: id
          in: query
          description: id number of student
          type: string
          x-exaple: "128888"
        - name: email
          in: query
          description: data of the student
          type: string
          x-example: "pincopallino@gmail.com"
        - name: name
          in: query
          description: name of student
          type: string
          x-example: "Pinco"
        - name: password
          in: query
          description: password for the login
          type: string
          x-example: "ppallino"
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Students'
    
    get:
      operationId: Add Student
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response          
    
    delete:
      description: Add, get and delete student from database
      operationId: removeStudent
      parameters:
        - name: id_student
          in: query
          description: id number of student that I want to delete
          type: integer
          x-example: 1
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
          
  /Courses:
    post:
      operationId: addCourse
      parameters:
        - name: Id
          in: query
          description: course data
          type: string
          x-example: 'Ingegneria del software 2'
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response
    get:
      operationId: coursesList
      parameters:
        - name: Id
          in: query
          description: id of the student
          type: integer
          x-example: 123456
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: List of all your courses
          schema:
              type: array
              items:
                $ref: '#/definitions/Courses'
    delete:
      description: Add, get and delete courses from students
      operationId: removeCourseaa
      
      responses:
        400:
          description: Bad request
        404:
          description: Resources not found
        200:
          description: Successful response

definitions:
  Students:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
      - id
      - email
      - name
      - password
    example:
      id: 12345
      email: stefano@gmail.com
      name: Stefano
      password: stefano
  
  Teachers:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
      - id
      - email
      - name
      - password
    example:
      id: 12345
      email: marco@gmail.com
      name: marco
      password: marco
      
  Admin:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      password:
        type: string
    required:
      - id
      - name
      - password
    example:
      id: 12345
      name: admin
      password: admin
      
  Assignment:
    type: object
    properties:
      id:
        type: string
      text:
        type: string
      name:
        type: string
      expireData:
        type: string
      uploadData:
        type: string
      studentId:
        type: string
      courseId:
        type: string
      active:
        type: boolean
      complete:
        type: boolean
    required:
      - id
      - text
      - name
      - expireData
      - uploadData
      - studentId
      - courseId
      - active
      - complete
    example:
      id: 12345
      text: Risolvi l'integrale
      name: Analisi
      expireData: 13-12-2018
      uploadData: 11-12-2018
      studentId: 123
      courseId: 1234
      active: true
      complete: false
      
  Courses:
    type: object
    properties:
      s_id:
        type: string
      description:
        type: string
      name:
        type: string
      t_id:
        type: string
    required:
      - s_id
      - description
      - name
      - t_id
    example:
      s_id: 12345
      description: Informatica+Economia
      name: INF ORG
      t_id: 123456
     
responses:
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string